{
  package parser

  import (
    "strings"

    "bezos/dynamodb/ddbstore/expressions/writeconditions/ast"
    "bezos/dynamodb/ddbstore/expressions/astutil"
  )
}

// Modified and tidied version of Dynalite's PEG file
// https://github.com/architect/dynalite/blob/b665c72c5e73ccdea09d64547e59cdeeae450333/db/conditionParser.pegjs

Start
  = _ expr:OrConditionExpression _ {  
      return expr, nil
    }

OrConditionExpression
  = x:AndConditionExpression _ token:OrToken _ y:OrConditionExpression {
      return ast.NewOrCondition(x, y), nil
    }
  / expr:AndConditionExpression

AndConditionExpression
  = x:NotConditionExpression _ AndToken _ y:AndConditionExpression {
      return ast.NewAndCondition(x, y), nil
    }
  / NotConditionExpression

NotConditionExpression
  = token:NotToken _ expr:ParensConditionExpression {
      return ast.NewNotCondition(expr), nil
    }
  / ParensConditionExpression

ParensConditionExpression
  = '(' _ '(' _ expr:OrConditionExpression _ ')' _ ')' {
      // can handle gracefully but DDB doesn't so we fail here with same err msg
      return expr, fmt.Errorf("The expression has redundant parentheses;")
    }
  / '(' _ '(' _ expr:ConditionExpression _ ')' _ ')' {
      // can handle gracefully but DDB doesn't so we fail here with same err msg
      return expr, fmt.Errorf("The expression has redundant parentheses;")
    }
  / expr:ConditionExpression {
      return expr, nil
    }
  / '(' _ expr:OrConditionExpression _ ')' {
      return expr, nil
    }

ConditionExpression
  = left:OperandParens _ comp:Comparator _ right:OperandParens {
      return ast.NewComparison(comp, left, right), nil
    }
  / val:OperandParens _ BetweenToken _ low:OperandParens _ AndToken _ high:OperandParens {
      return ast.NewBetweenExpr(val, low, high), nil
    }
  / val:OperandParens _ token:InToken _ '(' _ container:FunctionArgumentList _ ')' {
      return ast.NewContainsExpr(container, val), nil
    }
  / f:Function

Comparator
  = ">="
  / "<="
  / "<>"
  / "="
  / "<"
  / ">"

OperandParens
  = '(' _ '(' _ op:Operand _ ')' _ ')' {
      // can handle gracefully but DDB doesn't so we fail here with same err msg
      return op, fmt.Errorf("The expression has redundant parentheses")
    }
  / '(' _ op:Operand _ ')' {
      return op, nil
    }
  / Operand

Operand
  = Function
  / ExpressionAttributeValue
  / PathExpression 

Function
  = !ReservedWord head:IdentifierStart tail:IdentifierPart* _ '(' _ args:FunctionArgumentList _ ')' {
      name := astutil.HeadTailString(head, tail)
      return ast.NewFunctionCallExpr(name, args), nil
    }

FunctionArgumentList
  = head:OperandParens tail:(_ ',' _ expr:OperandParens { return expr, nil })* {
      return astutil.ToSlice[ast.Expression](astutil.HeadTailList(head, tail)), nil
    }

ExpressionAttributeName
  = !ReservedWord head:"#" tail:IdentifierPart* {
      return ast.NewExpressionAttributeName(string(c.text)), nil
    }

ExpressionAttributeValue
  = !ReservedWord head:":" tail:IdentifierPart* {
      return ast.NewExpressionAttributeValue(string(c.text)), nil
    }

PathExpression
  = head:GroupedPathExpression tail:(
      _ '[' _ [0-9]+ _ ']' {
        return astutil.Atoi(strings.Trim(string(c.text), "[]")), nil
      }
    / _ '.' _ prop:Identifier {
        return prop, nil
      }
    )* {
      return ast.NewAttributePathExpr(head, tail), nil
    }

GroupedPathExpression
  = Identifier
  / '(' _ '(' _ path:PathExpression _ ')' _ ')' {
      // can handle gracefully but DDB doesn't so we fail here with same err msg
      return path, fmt.Errorf("The expression has redundant parentheses;")
    }
  / '(' _ path:PathExpression _ ')' {
      return path, nil
    }

Identifier
  = !ReservedWord head:IdentifierStart tail:IdentifierPart* {
      return astutil.HeadTailString(head, tail), nil
    }
  / ExpressionAttributeName

IdentifierStart
  = [a-zA-Z]
  / "_"

IdentifierPart
  = IdentifierStart
  / [0-9]

AttributePart
  = IdentifierPart
  / "#"
  / ":"

// todo rename to "OperatorWord", figure out why we really need !ReservedWord, for performance or for correctness?
ReservedWord
  = BetweenToken
  / InToken
  / AndToken
  / OrToken
  / NotToken

BetweenToken = "BETWEEN"i !AttributePart
InToken = "IN"i !AttributePart
AndToken = "AND"i !AttributePart
OrToken = "OR"i !AttributePart
NotToken = "NOT"i !AttributePart

_ "whitespace"
  = [ \t\r\n]*